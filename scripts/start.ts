import webpack from 'webpack'
import WebpackDevServer from 'webpack-dev-server'
import { checkBrowsers } from 'react-dev-utils/browsersHelper'
import { choosePort, prepareUrls } from 'react-dev-utils/WebpackDevServerUtils'
import clearConsole from 'react-dev-utils/clearConsole'
import chalk from 'react-dev-utils/chalk'

import mainWebpackConfig, { Target, Environment } from '../webpack.config'
import createDevServerConfig from './w-dev-server'

import { appPath } from '../paths'

const isInteractive = process.stdout.isTTY
process.env.NODE_ENV = 'development'

const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000
const HOST = process.env.HOST || '0.0.0.0'

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err
})

checkBrowsers(appPath, isInteractive)
  .then(() => {
    return choosePort(HOST, DEFAULT_PORT)
  })
  .then(port => {
    if (port == null) return

    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http'
    const urls = prepareUrls(protocol, HOST, port)

    const clientCompiler = compile(mainWebpackConfig(Target.Client, Environment.Development))
    const serverCompiler = compile(mainWebpackConfig(Target.Server, Environment.Development))

    // Instantiate a variable to track server watching
    let watching

    // Start our server webpack instance in watch mode after assets compile
    clientCompiler.plugin('done', () => {
      // If we've already started the server watcher, bail early.
      if (watching) {
        return
      }
      // Otherwise, create a new watcher for our server code.
      watching = serverCompiler.watch({ quiet: true, stats: 'none' }, stats => {})
    })

    // Serve webpack assets generated by the compiler over a web server.
    const devServerConfig = createDevServerConfig({}, urls.lanUrlForConfig)
    const devServer = new WebpackDevServer(
      clientCompiler,
      devServerConfig as WebpackDevServer.Configuration
    )
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err)
      }
      if (isInteractive) {
        clearConsole()
      }
      console.log(chalk.cyan('Starting the development server...\n'))
    })
    // \\
    ;['SIGINT', 'SIGTERM'].forEach(sig => {
      //@ts-ignore
      process.on(sig, () => {
        devServer.close()
        process.exit()
      })
    })
  })

function compile(config) {
  let compiler
  try {
    compiler = webpack(config)
  } catch (e) {
    console.log('Failed to compile.', e)
    process.exit(1)
  }
  return compiler
}
